generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(uuid())
  username  String?   @unique
  password  String
  name      String
  email     String    @unique
  bio       String?
  image     String?   @map("avatar")
  role      String    @default("USER")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  comments  Comment[]
  posts     Post[]

  @@map("users")
}

model ContactMessages {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_messages")
}

model Post {
  id         String    @id @default(uuid())
  slug       String    @unique
  title      String
  excerpt    String?
  content    String
  published  Boolean   @default(false)
  authorId   String    @map("author_id")
  categoryId Int?      @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  comments   Comment[]
  category   Category? @relation(fields: [categoryId], references: [id])
  author     User      @relation(fields: [authorId], references: [id])
  tags       Tag[]     @relation("PostToTag")

  @@map("posts")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  posts       Post[]

  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  posts     Post[]   @relation("PostToTag")

  @@map("tags")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  String?   @map("author_id")
  postId    String    @map("post_id")
  parentId  Int?      @map("parent_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id])
  author    User?     @relation(fields: [authorId], references: [id])

  @@map("comments")
}
